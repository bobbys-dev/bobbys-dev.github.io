<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bobbys-dev blog</title>
    <link>https://bobbys-dev.github.io/</link>
    <description>Recent content on bobbys-dev blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://bobbys-dev.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Amazon delivery trucks üöö</title>
      <link>https://bobbys-dev.github.io/post/amazon-delivery-trucks/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bobbys-dev.github.io/post/amazon-delivery-trucks/</guid>
      <description>&lt;h3 id=&#34;scenario&#34;&gt;Scenario&lt;/h3&gt;
&lt;p&gt;Amazon Prime Now has 17-hour long days during which it deploys its fleet of trucks. The Order Forecaster for a region is really good at what they do and can give the exact number of trucks needed during each hour block for the coming day. The forecast schedule is in the form of a 17 element array. We can only deploy (add) trucks at the very beginning of the day, and any leftover trucks at the end of the day are automatically sent to maintenance. &lt;strong&gt;How would we algorithmically maintain a minimal service fleet?&lt;/strong&gt; For example if the required number of trucks is forecasted as:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;hour&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;th&gt;11&lt;/th&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;th&gt;13&lt;/th&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;th&gt;16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;#trucks&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The optimal decommissioning schedule is:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;hour&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;th&gt;11&lt;/th&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;th&gt;13&lt;/th&gt;
&lt;th&gt;14&lt;/th&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;th&gt;16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+/-trucks&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td&gt;-2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>Quest of The Delta Knights ‚öî</title>
      <link>https://bobbys-dev.github.io/post/quest-of-the-delta-knights/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bobbys-dev.github.io/post/quest-of-the-delta-knights/</guid>
      <description>&lt;h3 id=&#34;lord-vultare-has-stolen-archimedess-heat-ray-&#34;&gt;Lord Vultare has stolen Archimedes&amp;rsquo;s heat ray üî•üî•&lt;/h3&gt;
&lt;p&gt;&amp;hellip; and it&amp;rsquo;s up to Leonardo to take back the weapon before Lord Vultare uses it to seige the kingdom üèü. Both Lord Vultare and Leonardo are still in the Phantom Zone, but Lord Vultare has already started making his way back to our world! The Phantom Zone has many intersecting dimensions and time streams, so Leonardo can&amp;rsquo;t &lt;em&gt;just&lt;/em&gt; run up to Lord Vultare because they are seperated by time and space. Luckily, Leonardo has the Antikythera that allows him to instantaneously travel through time  üï∞ and space üåå. He can catch up to Lord Vultare near-instantly, but he can only travel in a specific combination of &lt;strong&gt;dimensions&lt;/strong&gt; and time &lt;strong&gt;moments&lt;/strong&gt; relative to his current dimension and time. These moves are summarized as moving +/-3 dimensions and +/-1 moments, or, +/-1 dimensions and +/-3 moments.&lt;/p&gt;
&lt;p&gt;The Phantom Zone has a finite number of dimensions and time frames though, given as &lt;code&gt;DIMENSIONS&lt;/code&gt; dimensions and &lt;code&gt;MOMENTS&lt;/code&gt; moments, and nobody can exist beyond those bounds. &lt;strong&gt;Given that Leonardo starts in the &lt;code&gt;d&lt;/code&gt; dimension and &lt;code&gt;m&lt;/code&gt; moment, and Lord Vultare is in &lt;code&gt;x&lt;/code&gt; dimension and &lt;code&gt;y&lt;/code&gt; moment, what is the minimum sequence of moves does he have to take to catch Lord Vultare?&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript functions</title>
      <link>https://bobbys-dev.github.io/post/javascript-functions/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bobbys-dev.github.io/post/javascript-functions/</guid>
      <description>&lt;p&gt;Functions in JavaScript are special built-in objects. Because their purpose is to interact with web components, they have properties and usages that are unique and different from common programming languages like Java/C++. There are different ways of coding JavaScript functions.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with something familiar though. Regular functions are declared with a &lt;code&gt;function&lt;/code&gt; statement, and they are later called by name like standard functions in other common languages . They are useful when you want to group lines of code that have a single responsibility.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;multiply&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3 multiplied by 4 is &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;)
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;multiply&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;3 multiplied by 4 is  12
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>PyTorch Intro</title>
      <link>https://bobbys-dev.github.io/post/intro-to-pytorch/</link>
      <pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bobbys-dev.github.io/post/intro-to-pytorch/</guid>
      <description>&lt;p&gt;&lt;strong&gt;This notebook introduces PyTorch as a jump off from Numpy and shows tensors in forward propogation as a basis in building neural networks.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ask Pandas</title>
      <link>https://bobbys-dev.github.io/post/ask-pandas/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bobbys-dev.github.io/post/ask-pandas/</guid>
      <description>&lt;p&gt;Pandas has a DataFrame method, &lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.query.html&#34;&gt;&lt;code&gt;query()&lt;/code&gt;&lt;/a&gt;, that lets you filter out subsets of data using a logical expression query. Since the expression is a string, it reads a little more naturally than subsetting dataframes using nested brackets. The expression is evaluated in a columnar fashion.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fast&#39;n&#39;lazy stack ü•ûü•ûü•û</title>
      <link>https://bobbys-dev.github.io/post/fast_n_lazy_stack/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bobbys-dev.github.io/post/fast_n_lazy_stack/</guid>
      <description>&lt;p&gt;A funky stack that is lazy but fast.&lt;/p&gt;
&lt;h3 id=&#34;scenario&#34;&gt;Scenario&lt;/h3&gt;
&lt;p&gt;We have to implement 3 operations on a stack-like list structure: &lt;code&gt;push [value]&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, and an increment operation, &lt;code&gt;inc [i] [value]&lt;/code&gt;, that adds &lt;code&gt;[value]&lt;/code&gt; to the bottom &lt;code&gt;[i]&lt;/code&gt; elements of the stack (&lt;code&gt;[value]&lt;/code&gt; can be negative). For example, &lt;code&gt;inc 3 10&lt;/code&gt; changes the bottom 3 data points in a stack as such:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;| 5|      | 5| (top)
| 4|      | 4|
| 2|  =&amp;gt;  |12|
| 2|      |12|
| 3|      |13| (bottom)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At first read, this is simple, but there&amp;rsquo;s a way to make run it faster than you might&amp;rsquo;ve considered&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ways To Decode A Cipher üî†</title>
      <link>https://bobbys-dev.github.io/post/ways_2_decode_nums/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bobbys-dev.github.io/post/ways_2_decode_nums/</guid>
      <description>&lt;h3 id=&#34;scenario&#34;&gt;Scenario&lt;/h3&gt;
&lt;p&gt;Determine number of possible ways to decode a given Caeser cipher encoded message that  maps:&lt;br&gt;
&amp;lsquo;A&amp;rsquo; -&amp;gt; &amp;lsquo;1&amp;rsquo;&lt;br&gt;
&amp;lsquo;B&amp;rsquo; -&amp;gt; &amp;lsquo;2&amp;rsquo;&lt;br&gt;
&amp;hellip;&lt;br&gt;
&amp;lsquo;Z&amp;rsquo; -&amp;gt; &amp;lsquo;26&amp;rsquo;&lt;br&gt;
The input is a string of n numbers and the output is a number counting all the possible ways a message could be decoded&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About bobbys-dev</title>
      <link>https://bobbys-dev.github.io/about/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bobbys-dev.github.io/about/</guid>
      <description>I&amp;rsquo;m a May 2020 graduate of Texas State University with a Master&amp;rsquo;s in Computer Science. I have a passion for engineering and data-driven work, and I&amp;rsquo;m actively looking for a role where I can build a data engineering and analytics career. While my background has primarily been hardware development, I&amp;rsquo;ve decided to shift into software oriented work to become more effective in a &amp;ldquo;big data&amp;rdquo; world. The focus of my studies at Texas State University was on data-driven research methods and software implementations.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://bobbys-dev.github.io/post/hello-world/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bobbys-dev.github.io/post/hello-world/</guid>
      <description>&lt;p&gt;This blog lets you know what I&amp;rsquo;m up to. Start at the &lt;a href=&#34;../../../about&#34;&gt;About&lt;/a&gt; for a summary about me.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
